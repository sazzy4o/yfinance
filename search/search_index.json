{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Test Plan Document Description: In the Test Plan Document, you will describe the part of the project that you are assigned to as well as the goals of your tests. You will document the assumptions made during the testing and the risks of failure of this piece of code with respect to the whole project.","title":"Test Plan"},{"location":"#test-plan-document","text":"Description: In the Test Plan Document, you will describe the part of the project that you are assigned to as well as the goals of your tests. You will document the assumptions made during the testing and the risks of failure of this piece of code with respect to the whole project.","title":"Test Plan Document"},{"location":"Issues_and_pull_requests/","text":"Assignment: Test .earnings and .quarterly_earnings in ticker.py file lines 148 to 154 Issues: Issue #533 PR #534 is linked to this issue Issue #543 Issue #489 Issue #475 PR #480 is linked to this issue Issue #191 Issue #423 Issue #400 Issue #328 Issue #291 PR #272 is linked to this issue Issue #254 Issue #223 Issue #181 PR #187 is linked to this issue, it is closed PR #174 is linked to this issue, it is closed Pull Requests PR #620 - Added an important financialCurrency property Changes made to yfinance/base.py Returns USD currency for _get_fundamentals PR #534 - Fix to financials Fixes URL datastream Change the data source that is processed by earnings function (base.py line #394 function) PR #246 - Fixes the scrape URL for financial data Functionally does the same as issue #535, however includes test cases PR #480 - Fix the fetching of fundamentals [Merged] Prevents the override of ticker url by holders url","title":"Temporary Issues & PR"},{"location":"Issues_and_pull_requests/#assignment-test-earnings-and-quarterly_earnings-in-tickerpy-file-lines-148-to-154","text":"","title":"Assignment: Test .earnings and .quarterly_earnings in ticker.py file lines 148 to 154"},{"location":"Issues_and_pull_requests/#issues","text":"","title":"Issues:"},{"location":"Issues_and_pull_requests/#issue-533","text":"PR #534 is linked to this issue","title":"Issue #533"},{"location":"Issues_and_pull_requests/#issue-543","text":"","title":"Issue #543"},{"location":"Issues_and_pull_requests/#issue-489","text":"","title":"Issue #489"},{"location":"Issues_and_pull_requests/#issue-475","text":"PR #480 is linked to this issue","title":"Issue #475"},{"location":"Issues_and_pull_requests/#issue-191","text":"","title":"Issue #191"},{"location":"Issues_and_pull_requests/#issue-423","text":"","title":"Issue #423"},{"location":"Issues_and_pull_requests/#issue-400","text":"","title":"Issue #400"},{"location":"Issues_and_pull_requests/#issue-328","text":"","title":"Issue #328"},{"location":"Issues_and_pull_requests/#issue-291","text":"PR #272 is linked to this issue","title":"Issue #291"},{"location":"Issues_and_pull_requests/#issue-254","text":"","title":"Issue #254"},{"location":"Issues_and_pull_requests/#issue-223","text":"","title":"Issue #223"},{"location":"Issues_and_pull_requests/#issue-181","text":"PR #187 is linked to this issue, it is closed PR #174 is linked to this issue, it is closed","title":"Issue #181"},{"location":"Issues_and_pull_requests/#pull-requests","text":"","title":"Pull Requests"},{"location":"Issues_and_pull_requests/#pr-620-added-an-important-financialcurrency-property","text":"Changes made to yfinance/base.py Returns USD currency for _get_fundamentals","title":"PR #620 - Added an important financialCurrency property"},{"location":"Issues_and_pull_requests/#pr-534-fix-to-financials","text":"Fixes URL datastream Change the data source that is processed by earnings function (base.py line #394 function)","title":"PR #534 - Fix to financials"},{"location":"Issues_and_pull_requests/#pr-246-fixes-the-scrape-url-for-financial-data","text":"Functionally does the same as issue #535, however includes test cases","title":"PR #246 - Fixes the scrape URL for financial data"},{"location":"Issues_and_pull_requests/#pr-480-fix-the-fetching-of-fundamentals-merged","text":"Prevents the override of ticker url by holders url","title":"PR #480 - Fix the fetching of fundamentals [Merged]"},{"location":"testcase_datatests/","text":"Test Case Document Test Case Testing incomplete, null, and broken data for the .earnings and .quarterly_earnings properties of ticker.py for the yfinance module. Test .earnings and .quarterly_earnings in ticker.py file lines 148 to 154 Purpose: The class TestDataValues in test_earnings.py verifies quarterly and annual earnings are correctly calculated regardless of missing quarterly or annual earnings data, data being null or other missing fields. Test Run Information: Tester Name(s): Chelsea Hong, Cameron Ridderikhoff Date(s) of Test: Friday, March 26, 2021 Prerequisites for this test: None Software Versions: Fork of finance: https://github.com/sazzy4o/yfinance Python Version: Python 3.4+ Required Configuration: No special setup needed Notes and Results: Step Test Step/Input Expected Results Actual Results Requirements Validation Pass/Fail User Flow 1: Verify that the annual .earnings and the .quarterly_earnings properties correctly display information, even with missing and incorrect input data. 1. run the test with python3 test_earnings.py ..... --------------------------------------------------- Ran 5 tests in 9.537s OK ..... --------------------------------------------------- Ran 5 tests in 9.537s OK The app should not crash even when there is no yearly data, and should still display all available information. The app should not crash even when there is no quarterly data, or if a quarter is missing, and should still display all available information. The app should not crash even when there is no annual earnings field data, and should still display all available information. The app should not crash even when there is no quarterly earnings field data, and should still display all available information. Pass User Flow 2: Not Applicable","title":"Data Tests Case Document"},{"location":"testcase_datatests/#test-case-document","text":"Test Case Testing incomplete, null, and broken data for the .earnings and .quarterly_earnings properties of ticker.py for the yfinance module. Test .earnings and .quarterly_earnings in ticker.py file lines 148 to 154 Purpose: The class TestDataValues in test_earnings.py verifies quarterly and annual earnings are correctly calculated regardless of missing quarterly or annual earnings data, data being null or other missing fields. Test Run Information: Tester Name(s): Chelsea Hong, Cameron Ridderikhoff Date(s) of Test: Friday, March 26, 2021 Prerequisites for this test: None Software Versions: Fork of finance: https://github.com/sazzy4o/yfinance Python Version: Python 3.4+ Required Configuration: No special setup needed Notes and Results: Step Test Step/Input Expected Results Actual Results Requirements Validation Pass/Fail User Flow 1: Verify that the annual .earnings and the .quarterly_earnings properties correctly display information, even with missing and incorrect input data. 1. run the test with python3 test_earnings.py ..... --------------------------------------------------- Ran 5 tests in 9.537s OK ..... --------------------------------------------------- Ran 5 tests in 9.537s OK The app should not crash even when there is no yearly data, and should still display all available information. The app should not crash even when there is no quarterly data, or if a quarter is missing, and should still display all available information. The app should not crash even when there is no annual earnings field data, and should still display all available information. The app should not crash even when there is no quarterly earnings field data, and should still display all available information. Pass User Flow 2: Not Applicable","title":"Test Case Document"},{"location":"testcase_invalidtickers/","text":"Test Case Document Purpose: Prevent errors with: 1. Invalid ticketer 2. Invalid company Test Run Information: Tester Names: Cameron and Ryan Date(s) of Test: March 27, 2021 Prerequisites for this test: None Software Versions: Current version of yfinance python 3 Required Configuration: Notes and Results: Step Test Step/Input Expected Results Actual Results Requirements Validation Pass/Fail User Flow 1: Testing empty string Create Ticker Ticker(\u2018\u2019) Ticker created Ticker created Pass Get earnings Ticker.earnings Return error HTTPError Can't use an empty string for a ticker Pass User Flow 2: Testing debunk company Create Ticker Ticker(\u2018LEHLQ\u2019) Ticker created Ticker created Pass Get earnings Ticker.earnings Return error KeyError Can't research debunct companies Pass User Flow 3: Misspelled company (GOOE vs GOOG) Create Ticker Ticker(\u2018GOOE\u2019) Ticker created Ticker created Pass Get earnings Ticker.earnings Return error KeyError Does not allow spelling mistakes Pass User Flow 4: White Space Create Ticker Ticker(\u2018 \u2019) Ticker created Ticker created Pass Get earnings Ticker.earnings Return error InvalidURL Can't use white space Pass User Flow 5: Numbers Create Ticker Ticker(\u2018123\u2019) Ticker created Ticker created Pass Get earnings Ticker.earnings Return error KeyError Can not use numbers Pass","title":"Invalid Tickers Case Document"},{"location":"testcase_invalidtickers/#test-case-document","text":"Purpose: Prevent errors with: 1. Invalid ticketer 2. Invalid company Test Run Information: Tester Names: Cameron and Ryan Date(s) of Test: March 27, 2021 Prerequisites for this test: None Software Versions: Current version of yfinance python 3 Required Configuration: Notes and Results: Step Test Step/Input Expected Results Actual Results Requirements Validation Pass/Fail User Flow 1: Testing empty string Create Ticker Ticker(\u2018\u2019) Ticker created Ticker created Pass Get earnings Ticker.earnings Return error HTTPError Can't use an empty string for a ticker Pass User Flow 2: Testing debunk company Create Ticker Ticker(\u2018LEHLQ\u2019) Ticker created Ticker created Pass Get earnings Ticker.earnings Return error KeyError Can't research debunct companies Pass User Flow 3: Misspelled company (GOOE vs GOOG) Create Ticker Ticker(\u2018GOOE\u2019) Ticker created Ticker created Pass Get earnings Ticker.earnings Return error KeyError Does not allow spelling mistakes Pass User Flow 4: White Space Create Ticker Ticker(\u2018 \u2019) Ticker created Ticker created Pass Get earnings Ticker.earnings Return error InvalidURL Can't use white space Pass User Flow 5: Numbers Create Ticker Ticker(\u2018123\u2019) Ticker created Ticker created Pass Get earnings Ticker.earnings Return error KeyError Can not use numbers Pass","title":"Test Case Document"},{"location":"testcase_report_datatests/","text":"Test Case Report General Infromation Test Stage: \u2705 Unit Test Date: Wed. Mar. 24, 2021 Tester: Chelsea Hong, Cameron Ridderikhoff Test Case Description: Testing incomplete, null, and broken data for the .earnings and .quarterly_earnings properties of ticker.py for the yfinance module. Test Case Number: 3 Results: \u2705 Passed Introduction Requirement(s) to be tested: .earnings, .quarterly_earnings Roles and Responsibilities: Quality assurance team\u2019s responsibility was to ensure quarterly and annual earnings were correctly calculated regardless of the state of the data. Set Up Procedures: Retrieve codebase Assume user has github account and git installed onto their machine 1. git clone https://github.com/sazzy4o/yfinance.git Setup Virtual Environment (recommended) 3. Install venv for Python 4. Create virtual environment virtualenv <desired path> 4. Activate virtual environment (macOS) source <desired path/bin/activate> Install Necessary Modules 5. pip3 install unittest 6. pip3 install . -editable Stop Procedures: Running tests can be terminated by pressing: CTRL+C Environmental Needs Hardware: N/A (any modern computer) Software: Python 3.4+, unittest module, yfinance module Procedural Requirements: Ensure the \u201cdata\u201d folder contains the correct json files. Must run pip install . -editable inside the yfinance folder in order to install yfinance\u2019s required additional modules. Test Test Items and Features: Features: System's ability to retrieve annual and quarterly earnings, system\u2019s ability to handle missing annual and quarterly earnings data Items: Ticker(\"GOOG\"), goog.earnings, goog.earnings[\"Earnings\"].size, goog.quarterly_earnings Input Specifications: None Procedural Steps: Go to test directory cd test run command python3 test_earnings.py The test case is run with the unittest module. This test case is set up under the \u201cTestDataValues\u201d class, and the tests themselves are all run using the python code: unittest.main() , which is run when the file \u201ctest_earnings.py\u201d is run. Expected Results of Case: The output will say that a test failed if a test failed. It will show the following if the test is completed successfully: ..... --------------------------------------------------- Ran 5 tests in 9.537s OK Actual Results Output Specifications: The actual results that we got from running our test is the following: Passed Test will include how many tests were run and how long it took to run. Finally displaying a status of \u201cOK\u201d if all tests were passed. Passed Test Example Output: ..... --------------------------------------------------- Ran 5 tests in 9.537s OK A failed test will include the traceback of where the test failed and why it failed. Along with how many tests were run and how long it took to run. Finally it will display a \u201cFAILED\u201d status with how many tests failed. Failed Test Example Output: ...F. ====================================================================== FAIL: test_quarterly_earnings_field_missing (__main__.TestDataValues) ---------------------------------------------------------------------- Traceback (most recent call last): File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/unittest/mock.py\", line 1348, in patched return func(*newargs, **newkeywargs) File \"test/test_earnings.py\", line 96, in test_quarterly_earnings_field_missing self.assertTrue(isnan(earnings.iloc[1])) AssertionError: False is not true ---------------------------------------------------------------------- Ran 5 tests in 9.812s FAILED (failures=1)","title":"Data Tests Case Report Document"},{"location":"testcase_report_datatests/#test-case-report","text":"","title":"Test Case Report"},{"location":"testcase_report_datatests/#general-infromation","text":"Test Stage: \u2705 Unit Test Date: Wed. Mar. 24, 2021 Tester: Chelsea Hong, Cameron Ridderikhoff Test Case Description: Testing incomplete, null, and broken data for the .earnings and .quarterly_earnings properties of ticker.py for the yfinance module. Test Case Number: 3 Results: \u2705 Passed","title":"General Infromation"},{"location":"testcase_report_datatests/#introduction","text":"Requirement(s) to be tested: .earnings, .quarterly_earnings Roles and Responsibilities: Quality assurance team\u2019s responsibility was to ensure quarterly and annual earnings were correctly calculated regardless of the state of the data. Set Up Procedures: Retrieve codebase Assume user has github account and git installed onto their machine 1. git clone https://github.com/sazzy4o/yfinance.git Setup Virtual Environment (recommended) 3. Install venv for Python 4. Create virtual environment virtualenv <desired path> 4. Activate virtual environment (macOS) source <desired path/bin/activate> Install Necessary Modules 5. pip3 install unittest 6. pip3 install . -editable Stop Procedures: Running tests can be terminated by pressing: CTRL+C","title":"Introduction"},{"location":"testcase_report_datatests/#environmental-needs","text":"Hardware: N/A (any modern computer) Software: Python 3.4+, unittest module, yfinance module Procedural Requirements: Ensure the \u201cdata\u201d folder contains the correct json files. Must run pip install . -editable inside the yfinance folder in order to install yfinance\u2019s required additional modules.","title":"Environmental Needs"},{"location":"testcase_report_datatests/#test","text":"Test Items and Features: Features: System's ability to retrieve annual and quarterly earnings, system\u2019s ability to handle missing annual and quarterly earnings data Items: Ticker(\"GOOG\"), goog.earnings, goog.earnings[\"Earnings\"].size, goog.quarterly_earnings Input Specifications: None Procedural Steps: Go to test directory cd test run command python3 test_earnings.py The test case is run with the unittest module. This test case is set up under the \u201cTestDataValues\u201d class, and the tests themselves are all run using the python code: unittest.main() , which is run when the file \u201ctest_earnings.py\u201d is run. Expected Results of Case: The output will say that a test failed if a test failed. It will show the following if the test is completed successfully: ..... --------------------------------------------------- Ran 5 tests in 9.537s OK","title":"Test"},{"location":"testcase_report_datatests/#actual-results","text":"Output Specifications: The actual results that we got from running our test is the following: Passed Test will include how many tests were run and how long it took to run. Finally displaying a status of \u201cOK\u201d if all tests were passed. Passed Test Example Output: ..... --------------------------------------------------- Ran 5 tests in 9.537s OK A failed test will include the traceback of where the test failed and why it failed. Along with how many tests were run and how long it took to run. Finally it will display a \u201cFAILED\u201d status with how many tests failed. Failed Test Example Output: ...F. ====================================================================== FAIL: test_quarterly_earnings_field_missing (__main__.TestDataValues) ---------------------------------------------------------------------- Traceback (most recent call last): File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/unittest/mock.py\", line 1348, in patched return func(*newargs, **newkeywargs) File \"test/test_earnings.py\", line 96, in test_quarterly_earnings_field_missing self.assertTrue(isnan(earnings.iloc[1])) AssertionError: False is not true ---------------------------------------------------------------------- Ran 5 tests in 9.812s FAILED (failures=1)","title":"Actual Results"},{"location":"testcase_report_invalidtickers/","text":"Test Case Invalid Tickers Report General Infromation Test Stage: Unit Testing Test Date: Mar 27, 2021 Testers: Cameron, Ryan Test Case Description: Testing the response from invalid ticker requests for the ticker.py file in the yfinance module. Test Case Number: 6 Results: Passed all tests Introduction Requirement(s) to be tested: ticker Roles and Responsibilities: The team's goal was to test for the proper response from the .earnings method for multiple different valid and invalid inputs. Set Up Procedures: Retrieve codebase Assuming user has github account and git installed onto their machine 1. git clone https://github.com/sazzy4o/yfinance.git Setup Virtual Environment (recommended) 3. Install venv for Python 4. Create virtual environment virtualenv <desired path> 4. Activate virtual environment (macOS) source <desired path/bin/activate> Install Necessary Modules 5. pip3 install unittest 6. pip3 install . -editable Stop Procedures: Press CTRL + C Environmental Needs Hardware: Any computer capable of running a modern operating system. Software: Any modern operating system capable of running python3. Procedural Requirements: Ensure the \u201cdata\u201d folder contains the correct json files. Must run pip install . -editable inside the yfinance folder in order to install yfinance\u2019s required additional modules. Test Test Items: `invalid = yf.Ticker('InvalidTickerName') with self.assertRaises(ValueError): invalid.earnings invalid = yf.Ticker('') #test empty with self.assertRaises(HTTPError): invalid.earnings invalid = yf.Ticker('LEHLQ') #test debunct with self.assertRaises(KeyError): invalid.earnings invalid = yf.Ticker('GOOE') #test misspelled (like GOOE when we want GOOG) with self.assertRaises(KeyError): invalid.earnings invalid = yf.Ticker(' ') # test white space with self.assertRaises(InvalidURL): invalid.earnings invalid = yf.Ticker('123') # test with numbers with self.assertRaises(KeyError): invalid.earnings` Test Features: System's ability to properly handle invalid inputs Input Specifications: N/A, all tests run automatically Procedural Steps: 1. Go to test directory cd test 2. run command python3 test_tickers.py The test case is run with the unittest module. This test case is set up under the \u201cTestDataValues\u201d class, and the tests themselves are all run using the python code: unittest.main() , which is run when the file \u201ctest_earnings.py\u201d is run. Expected Results of Case: The output will say that a test failed if a test failed. It will show the following if the test is completed successfully: . ---------------------------------------------------------------------- Ran 1 test in 12.580s OK Actual Results Output Specifications: . ---------------------------------------------------------------------- Ran 1 test in 12.580s OK","title":"Invalid Tickers Case Report Document"},{"location":"testcase_report_invalidtickers/#test-case-invalid-tickers-report","text":"","title":"Test Case Invalid Tickers Report"},{"location":"testcase_report_invalidtickers/#general-infromation","text":"Test Stage: Unit Testing Test Date: Mar 27, 2021 Testers: Cameron, Ryan Test Case Description: Testing the response from invalid ticker requests for the ticker.py file in the yfinance module. Test Case Number: 6 Results: Passed all tests","title":"General Infromation"},{"location":"testcase_report_invalidtickers/#introduction","text":"Requirement(s) to be tested: ticker Roles and Responsibilities: The team's goal was to test for the proper response from the .earnings method for multiple different valid and invalid inputs. Set Up Procedures: Retrieve codebase Assuming user has github account and git installed onto their machine 1. git clone https://github.com/sazzy4o/yfinance.git Setup Virtual Environment (recommended) 3. Install venv for Python 4. Create virtual environment virtualenv <desired path> 4. Activate virtual environment (macOS) source <desired path/bin/activate> Install Necessary Modules 5. pip3 install unittest 6. pip3 install . -editable Stop Procedures: Press CTRL + C","title":"Introduction"},{"location":"testcase_report_invalidtickers/#environmental-needs","text":"Hardware: Any computer capable of running a modern operating system. Software: Any modern operating system capable of running python3. Procedural Requirements: Ensure the \u201cdata\u201d folder contains the correct json files. Must run pip install . -editable inside the yfinance folder in order to install yfinance\u2019s required additional modules.","title":"Environmental Needs"},{"location":"testcase_report_invalidtickers/#test","text":"Test Items: `invalid = yf.Ticker('InvalidTickerName') with self.assertRaises(ValueError): invalid.earnings invalid = yf.Ticker('') #test empty with self.assertRaises(HTTPError): invalid.earnings invalid = yf.Ticker('LEHLQ') #test debunct with self.assertRaises(KeyError): invalid.earnings invalid = yf.Ticker('GOOE') #test misspelled (like GOOE when we want GOOG) with self.assertRaises(KeyError): invalid.earnings invalid = yf.Ticker(' ') # test white space with self.assertRaises(InvalidURL): invalid.earnings invalid = yf.Ticker('123') # test with numbers with self.assertRaises(KeyError): invalid.earnings` Test Features: System's ability to properly handle invalid inputs Input Specifications: N/A, all tests run automatically Procedural Steps: 1. Go to test directory cd test 2. run command python3 test_tickers.py The test case is run with the unittest module. This test case is set up under the \u201cTestDataValues\u201d class, and the tests themselves are all run using the python code: unittest.main() , which is run when the file \u201ctest_earnings.py\u201d is run. Expected Results of Case: The output will say that a test failed if a test failed. It will show the following if the test is completed successfully: . ---------------------------------------------------------------------- Ran 1 test in 12.580s OK","title":"Test"},{"location":"testcase_report_invalidtickers/#actual-results","text":"Output Specifications: . ---------------------------------------------------------------------- Ran 1 test in 12.580s OK","title":"Actual Results"},{"location":"testcase_report_values/","text":"Test Case Report General Infromation Test Stage: Unit Test Date: Wed. Mar. 27, 2021 Tester: Spencer von der Ohe Test Case Description: Test that the earnings and quarterly_earnings properties are able to generate and handle positive, negative and zero values Test Case Number: 1 Results: \u2705 Passed Introduction Requirement(s) to be tested: The earnings and quarterly_earnings properties should support positive, negative and zero values Roles and Responsibilities: Quality assurance team\u2019s responsibility was to ensure quarterly and annual earnings were correctly calculated regardless of the state of the data. Set Up Procedures: Retrieve codebase Assume user has github account and git installed onto their machine 1. git clone https://github.com/sazzy4o/yfinance.git 2. cd yfinance Setup Virtual Environment (recommended) 3. Install venv for Python 4. Create virtual environment virtualenv <desired path> 5. Activate virtual environment (macOS) source <desired path/bin/activate> Install Necessary Modules 6. pip3 install unittest 7. pip3 install . -editable Stop Procedures: Running tests can be terminated by pressing: CTRL+C Environmental Needs Hardware: N/A (any modern computer) Software: Python 3.4+, unittest module, yfinance module Procedural Requirements: None Test Test Items and Features: Features: System's ability to retrieve annual and quarterly earnings of positive, negative and zero values Items: Ticker(), Ticker.earnings, Ticker.quarterly_earnings Input Specifications: None Procedural Steps: Go to test directory cd test run command python3 test_earnings_values.py The test case is run with the unittest module. This test case is set up under the TestDataValues class, and the tests themselves are all run using the python code: unittest.main() , which is run when the file test_earnings_values.py is run. Expected Results of Case: The output will say that a test failed if a test failed. It will show the following if the test is completed successfully: ...... ---------------------------------------------------------------------- Ran 6 tests in 7.069s OK Actual Results Passed Test Example Output: ...... ---------------------------------------------------------------------- Ran 6 tests in 7.069s OK A failed test will include the traceback of where the test failed and why it failed. Along with how many tests were run and how long it took to run. Finally it will display a FAILED status with how many tests failed. Failed Test Example Output: ..F... ====================================================================== FAIL: test_positive_earnings (__main__.TestEarnings) Test positive earnings ---------------------------------------------------------------------- Traceback (most recent call last): File \"C:\\Users\\svond\\AppData\\Local\\Programs\\Python\\Python39\\lib\\unittest\\mock.py\", line 1337, in patched return func(*newargs, **newkeywargs) File \"C:\\Users\\svond\\OneDrive\\Desktop\\Github\\yfinance\\test\\test_earnings_values.py\", line 49, in test_positive_earnings self.assertEqual(earning_2020,40_269_000_00) AssertionError: 40269000000 != 4026900000 ---------------------------------------------------------------------- Ran 6 tests in 5.525s FAILED (failures=1)","title":"Values Test Case Report Document"},{"location":"testcase_report_values/#test-case-report","text":"","title":"Test Case Report"},{"location":"testcase_report_values/#general-infromation","text":"Test Stage: Unit Test Date: Wed. Mar. 27, 2021 Tester: Spencer von der Ohe Test Case Description: Test that the earnings and quarterly_earnings properties are able to generate and handle positive, negative and zero values Test Case Number: 1 Results: \u2705 Passed","title":"General Infromation"},{"location":"testcase_report_values/#introduction","text":"Requirement(s) to be tested: The earnings and quarterly_earnings properties should support positive, negative and zero values Roles and Responsibilities: Quality assurance team\u2019s responsibility was to ensure quarterly and annual earnings were correctly calculated regardless of the state of the data. Set Up Procedures: Retrieve codebase Assume user has github account and git installed onto their machine 1. git clone https://github.com/sazzy4o/yfinance.git 2. cd yfinance Setup Virtual Environment (recommended) 3. Install venv for Python 4. Create virtual environment virtualenv <desired path> 5. Activate virtual environment (macOS) source <desired path/bin/activate> Install Necessary Modules 6. pip3 install unittest 7. pip3 install . -editable Stop Procedures: Running tests can be terminated by pressing: CTRL+C","title":"Introduction"},{"location":"testcase_report_values/#environmental-needs","text":"Hardware: N/A (any modern computer) Software: Python 3.4+, unittest module, yfinance module Procedural Requirements: None","title":"Environmental Needs"},{"location":"testcase_report_values/#test","text":"Test Items and Features: Features: System's ability to retrieve annual and quarterly earnings of positive, negative and zero values Items: Ticker(), Ticker.earnings, Ticker.quarterly_earnings Input Specifications: None Procedural Steps: Go to test directory cd test run command python3 test_earnings_values.py The test case is run with the unittest module. This test case is set up under the TestDataValues class, and the tests themselves are all run using the python code: unittest.main() , which is run when the file test_earnings_values.py is run. Expected Results of Case: The output will say that a test failed if a test failed. It will show the following if the test is completed successfully: ...... ---------------------------------------------------------------------- Ran 6 tests in 7.069s OK","title":"Test"},{"location":"testcase_report_values/#actual-results","text":"Passed Test Example Output: ...... ---------------------------------------------------------------------- Ran 6 tests in 7.069s OK A failed test will include the traceback of where the test failed and why it failed. Along with how many tests were run and how long it took to run. Finally it will display a FAILED status with how many tests failed. Failed Test Example Output: ..F... ====================================================================== FAIL: test_positive_earnings (__main__.TestEarnings) Test positive earnings ---------------------------------------------------------------------- Traceback (most recent call last): File \"C:\\Users\\svond\\AppData\\Local\\Programs\\Python\\Python39\\lib\\unittest\\mock.py\", line 1337, in patched return func(*newargs, **newkeywargs) File \"C:\\Users\\svond\\OneDrive\\Desktop\\Github\\yfinance\\test\\test_earnings_values.py\", line 49, in test_positive_earnings self.assertEqual(earning_2020,40_269_000_00) AssertionError: 40269000000 != 4026900000 ---------------------------------------------------------------------- Ran 6 tests in 5.525s FAILED (failures=1)","title":"Actual Results"},{"location":"testcase_values/","text":"Test Case Document Purpose: Verify that the .earnings and .quarterly_earnings properties are able to generate and handle positive, negative and zero values Test Run Information: Tester Name: Spencer von der Ohe Date(s) of Test: March 27th, 2021 Prerequisites for this test: None Software Versions: Fork of finance: https://github.com/sazzy4o/yfinance Python Version: Python 3.4+ Required Configuration: No special setup needed Notes and Results: Step Test Step/Input Expected Results Actual Results Requirement Validation Pass/Fail Flow 1: Verify that the annual .earnings property supports positive values 1 Replace get_json with mock function that returns a company with positive earnings get_json is updated get_json is updated \u2705 2 Create ticker that corrisponds to the mocked data Ticker is created Ticker is created \u2705 3 Get earnings property Earning property is returned Earning property is returned \u2705 4 Validate that the earnings Match expected positive value Match expected positive value earnings can handle positive values \u2705 Flow 2: Verify that the .quarterly_earnings property supports positive values 1 Replace get_json with mock function that returns a company with positive quarterly earnings get_json is updated get_json is updated \u2705 2 Create ticker that corrisponds to the mocked data Ticker is created Ticker is created \u2705 3 Get quarterly_earnings property Earning property is returned Earning property is returned \u2705 4 Validate that the quarterly_earnings Match expected positive value Match expected positive value quarterly_earnings can handle positive values \u2705 Flow 3: Verify that the annual .earnings property supports positive values 1 Replace get_json with mock function that returns a company with negative earnings get_json is updated get_json is updated \u2705 2 Create ticker that corrisponds to the mocked data Ticker is created Ticker is created \u2705 3 Get earnings property Earning property is returned Earning property is returned \u2705 4 Validate that the earnings Match expected negative value Match expected negative value earnings can handle negative values \u2705 Flow 4: Verify that the .quarterly_earnings property supports negative values 1 Replace get_json with mock function that returns a company with negative quarterly earnings get_json is updated get_json is updated \u2705 2 Create ticker that corrisponds to the mocked data Ticker is created Ticker is created \u2705 3 Get quarterly_earnings property Earning property is returned Earning property is returned \u2705 4 Validate that the quarterly_earnings Match expected negative value Match expected negative value quarterly_earnings can handle negative values \u2705 Flow 5: Verify that the annual .earnings property supports zero values 1 Replace get_json with mock function that returns a company with zero earnings get_json is updated get_json is updated \u2705 2 Create ticker that corrisponds to the mocked data Ticker is created Ticker is created \u2705 3 Get earnings property Earning property is returned Earning property is returned \u2705 4 Validate that the earnings Match expected zero value Match expected zero value earnings can handle values of zero \u2705 Flow 6: Verify that the .quarterly_earnings property supports zero values 1 Replace get_json with mock function that returns a company with zero quarterly earnings get_json is updated get_json is updated \u2705 2 Create ticker that corrisponds to the mocked data Ticker is created Ticker is created \u2705 3 Get quarterly_earnings property Earning property is returned Earning property is returned \u2705 4 Validate that the quarterly_earnings Match expected zero value Match expected zero value quarterly_earnings can handle values of zero \u2705","title":"Values Test Case Document"},{"location":"testcase_values/#test-case-document","text":"Purpose: Verify that the .earnings and .quarterly_earnings properties are able to generate and handle positive, negative and zero values Test Run Information: Tester Name: Spencer von der Ohe Date(s) of Test: March 27th, 2021 Prerequisites for this test: None Software Versions: Fork of finance: https://github.com/sazzy4o/yfinance Python Version: Python 3.4+ Required Configuration: No special setup needed Notes and Results: Step Test Step/Input Expected Results Actual Results Requirement Validation Pass/Fail Flow 1: Verify that the annual .earnings property supports positive values 1 Replace get_json with mock function that returns a company with positive earnings get_json is updated get_json is updated \u2705 2 Create ticker that corrisponds to the mocked data Ticker is created Ticker is created \u2705 3 Get earnings property Earning property is returned Earning property is returned \u2705 4 Validate that the earnings Match expected positive value Match expected positive value earnings can handle positive values \u2705 Flow 2: Verify that the .quarterly_earnings property supports positive values 1 Replace get_json with mock function that returns a company with positive quarterly earnings get_json is updated get_json is updated \u2705 2 Create ticker that corrisponds to the mocked data Ticker is created Ticker is created \u2705 3 Get quarterly_earnings property Earning property is returned Earning property is returned \u2705 4 Validate that the quarterly_earnings Match expected positive value Match expected positive value quarterly_earnings can handle positive values \u2705 Flow 3: Verify that the annual .earnings property supports positive values 1 Replace get_json with mock function that returns a company with negative earnings get_json is updated get_json is updated \u2705 2 Create ticker that corrisponds to the mocked data Ticker is created Ticker is created \u2705 3 Get earnings property Earning property is returned Earning property is returned \u2705 4 Validate that the earnings Match expected negative value Match expected negative value earnings can handle negative values \u2705 Flow 4: Verify that the .quarterly_earnings property supports negative values 1 Replace get_json with mock function that returns a company with negative quarterly earnings get_json is updated get_json is updated \u2705 2 Create ticker that corrisponds to the mocked data Ticker is created Ticker is created \u2705 3 Get quarterly_earnings property Earning property is returned Earning property is returned \u2705 4 Validate that the quarterly_earnings Match expected negative value Match expected negative value quarterly_earnings can handle negative values \u2705 Flow 5: Verify that the annual .earnings property supports zero values 1 Replace get_json with mock function that returns a company with zero earnings get_json is updated get_json is updated \u2705 2 Create ticker that corrisponds to the mocked data Ticker is created Ticker is created \u2705 3 Get earnings property Earning property is returned Earning property is returned \u2705 4 Validate that the earnings Match expected zero value Match expected zero value earnings can handle values of zero \u2705 Flow 6: Verify that the .quarterly_earnings property supports zero values 1 Replace get_json with mock function that returns a company with zero quarterly earnings get_json is updated get_json is updated \u2705 2 Create ticker that corrisponds to the mocked data Ticker is created Ticker is created \u2705 3 Get quarterly_earnings property Earning property is returned Earning property is returned \u2705 4 Validate that the quarterly_earnings Match expected zero value Match expected zero value quarterly_earnings can handle values of zero \u2705","title":"Test Case Document"}]}